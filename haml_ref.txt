*1241166958*[Ruby]Hamlリファレンス
なんとなく気が向いたので途中まで訳してみた。 
だいたい20%くらいまで。続きはまた今度やる。
(原文はこちら)→http://haml.hamptoncatlin.com/docs/rdoc/classes/Haml.html

** Haml(XHTML Abstraction Markup language)

Haml はあらゆるwebドキュメントをインラインコードを用いずにXHTMLでクリアでシンプルに記述するマークアップ言語です。Hamlの機能はPHP、ERB、ASPなどのテンプレートシステムの代替となります。HamlではXHTMLコードをテンプレートに記述する必要はありません。なぜならばそれはXHTMLコードの動的なコンテンツを生成する抽象記述だからです。

====

** 特徴
-空白動作(?)
-良く整形されたマークアップ
-DRY
-CSSの規約に準拠
-Rubyとの統合
-.haml拡張子によるRailsテンプレートの実装

** Hamlをつかう

Hamlは3つの方法で使用することができます。Railsプラグイン、標準Rubyモジュール、コマンドラインツール。3つの方法で共通する最初のステップはHaml gemをインストールすることです。

>||
  gem install haml
||<

Railsプラグインとして使用するには下記のコマンドを実行します。

>||
  haml --rails path/to/rails/app
||<

インストールされたら、すべてのviewファイルはHamlを使用して".html.haml"にコンパイルされます。

Hamlをコマンドラインから実行するには、以下のコマンドを実行するだけです。

>||
  haml input.haml output.html
||<

Hamlテンプレートの中ではERBのようにいくつかの方法でインスタンス変数にアクセスすることができます。ヘルパーモジュールはHamlの中でも使用可能です。例えば(これはRailsの例ですがMarbでも同じ原理です)

>|ruby|
  # file: app/controllers/movies_controller.rb

  class MoviesController < ApplicationController
    def index
      @title = "Teen Wolf"
    end
  end
||<

>||
  # file: app/views/movies/index.haml

  #content
   .title
     %h1= @title
     = link_to 'Home', home_url
||<

これは以下のようにコンパイルされます。

>|xhtml|
  <div id='content'>
    <div class='title'>
      <h1>Teen Wolf</h1>
      <a href='/'>Home</a>
    </div>
  </div>
||<

** Rubyモジュール

HamlはRailsとActionViewから切り離して使用することもできます。そのためにはRubyGemsを使用してHamlをインストールします。

>||
  gem install haml
||<

hamlをRubyコードの中で使用するには下記のようにHaml::Engineを使用します。

>|ruby|
  require 'rubygems'
  require 'haml'
  engine = Haml::Engine.new("%p Haml code!")
  engine.render #=> "<p>Haml code!</p>\n"
||<

** Hamlの文字の意味

特定の場所に置かれたいくつもの文字がHamlに異なるタイプのレンダリングを指示します。

*** XHTMLタグ

これらの文字はXHTMLタグを生成します。

*** %

パーセント文字は行の先頭に記述されます。それに続く文字列は要素名となり、修正の機会、（下記をみてください）空白、テキストは要素の内部に出力されます。

>||
  %one
    %two
      %three Hey there
||<

これは以下のようにコンパイルされます。

>|xhtml|
  <one>
    <two>
      <three>Hey there</three>
    </two>
  </one>
||<

すべての文字列はが有効な要素名として解釈されます。Hamlは自動的にその要素名の開きタグと閉じタグを生成します。

*** {}

中カッコはRubyのハッシュで、要素の属性を指定します。それはRubyのハッシュと同じように評価され、その中でロジックを記述することもできます。またローカル変数も使用できます。属性の中でクオートされた文字列は適切なエスケープシーケンスで置換されます。ハッシュはタグの定義の後に置かれます。

例：

>||
  %head{ :name => "doc_head" }
    %script{ 'type' => "text/" + "javascript",
             :src   => "javascripts/script_#{2 + 7}" }
||<

これは以下のようにコンパイルされます。

>|xhtml|
  <head name='doc_head'>
    <script src='/docs/rdoc/javascripts/script_9' type='text/javascript'>
    </script>
  </head>
||<

*** 属性を返すメソッド

ハッシュを返すRubyのメソッド呼び出しはハッシュの代用とすることができます。例えばHaml::Helpersは下記のように定義されています。

>|ruby|
  def html_attrs(lang = 'en-US')
    {:xmlns => "http://www.w3.org/1999/xhtml", 'xml:lang' => lang, :lang => lang}
  end
||<

これによってHamlで以下のように書くことができます。

>||
  %html{html_attrs('fr-fr')}
||<

これは以下のようにコンパイルされます。

>|xhtml|
  <html lang='fr-fr' xml:lang='fr-fr' xmlns='http://www.w3.org/1999/xhtml'>
  </html>
||<

他にもあなたが好きなメソッドを属性を返すメソッドとして使用することができます。
Ruby引数のようにコンマで分離して記述します。メソッドの返り値のハッシュは左から右の方向に一緒に連結されてひとつのハッシュになります。例えばあなたが下記のようにhash1とhash2定義し

>|ruby|
  def hash1
    {:bread => 'white', :filling => 'peanut butter and jelly'}
  end

  def hash2
    {:bread => 'whole wheat'}
  end
||<

これをhamlで下記のように記述した場合には

>||
  %sandwich{hash1, hash2, :delicious => true}/
||<

以下のようにコンパイルされます。

>|xhtml|
 <sandwich bread='whole wheat' delicious='true' filling='peanut butter and jelly' />
||<

Hamlの属性リストはRubyのメソッド呼び出しと同じ文法規則をもつことに注意してください。これはすべての属性を返すメソッドメソッドはハッシュリテラルの前に無くてはならないことを意味します。

Boolean Attributes
*** Boolean属性

inputタグの"checked"、optionタグの"selected"のようないくつかの属性は値に意味をもちません -- これらはその属性が存在するかどうかだけが意味を持ちます。-- HTMLでは以下のように書くことができます。（この書き方はXHTMLでは許されていません）

>|html|
  <input selected>
||<

Hamlではtrueを属性の値に割り当てて記述します。

>||
  %input{:selected => true}
||<

XHTMLでは、属性名と同じ有効な値を各属性に与える必要があります。これはXHTMLで下記のように出力されます。

>|xhtml|
  <input selected='selected'>
||<

属性にfalseを設定するには、単にRubyのfalseを割り当てます。これはXHTMLでもHTMLでも同じです。

>||
  %input{:selected => false}
||<

これは以下のようにコンパイルされます。

>|xhtml|
  <input>
||<

*** []

角カッコ((でいいのか？))はタグ定義の後に続き、クラスとそのタグのidで使われるRubyオブジェクトが内部に記述されます。
クラスにはオブジェクトのクラスがセットされ、 (transformed to use underlines rather than camel case) idにはidに引き続くオブジェクトのクラスがセットされます。 Because the id of an object is normally an obscure implementation detail, this is most useful for elements that represent instances of Models. Additionally, the second argument (if present) will be used as a prefix for both the id and class attributes. For example: 

>|ruby|
  # file: app/controllers/users_controller.rb

  def show
    @user = CrazyUser.find(15)
  end
||<

>||
  # file: app/views/users/show.haml

  %div[@user, :greeting]
    %bar[290]/
    Hello!
||<

これは以下のようにコンパイルされます。

>||
  <div class='greeting_crazy_user' id='greeting_crazy_user_15'>
    <bar class='fixnum' id='fixnum_581' />
    Hello!
  </div>
||<

*** /

タグ定義の後ろにかかれたスラッシュはself-closedな((開始、終了の組み合わせをもたないもの<br />とか<hr />とかのこと))タグを生成します。例えば：

>||
  %br/
  %meta{'http-equiv' => 'Content-Type', :content => 'text/html'}/
||<

これは以下のようにコンパイルされます。

>||
  <br />
  <meta http-equiv='Content-Type' content='text/html' />
||<

コンテンツがない場合、いくつかのタグは自動的に閉じられます。(meta, img, link, script, br, hr のタグはデフォルトで閉じます。この設定:autocloseオプションによってカスタマイズ可能です(下記参照)。例えば：

>||
  %br
  %meta{'http-equiv' => 'Content-Type', :content => 'text/html'}
||<

はどちらも以下のようにコンパイルされます。

>||
  <br />
  <meta http-equiv='Content-Type' content='text/html' />
||<

*** . and #
The period and pound sign are borrowed from CSS. They are used as shortcuts to specify the class and id attributes of an element, respectively. Multiple class names can be specified in a similar way to CSS, by chaining the class names together with periods. They are placed immediately after the tag and before an attributes hash. For example: 

>||
  %div#things
    %span#rice Chicken Fried
    %p.beans{ :food => 'true' } The magical fruit
    %h1.class.otherclass#id La La La
||<

is compiled to: 

>||
  <div id='things'>
    <span id='rice'>Chicken Fried</span>
    <p class='beans' food='true'>The magical fruit</p>
    <h1 class='class otherclass' id='id'>La La La</h1>
  </div>And, 

>||
  #content
    .articles
      .article.title
        Doogie Howser Comes Out
      .article.date
        2006-11-05
      .article.entry
        Neil Patrick Harris would like to dispel any rumors that he is straight

||<

これは以下のようにコンパイルされます。

>||
  <div id='content'>
    <div class='articles'>
      <div class='article title'>Doogie Howser Comes Out</div>
      <div class='article date'>2006-11-05</div>
      <div class='article entry'>
        Neil Patrick Harris would like to dispel any rumors that he is straight
      </div>
    </div>
  </div>
||<
Implicit Div Elements
Because the div element is used so often, it is the default element. If you only define a class and/or id using the . or # syntax, a div element is automatically used. For example: 

  #collection
    .item
      .description What a cool item!is the same as: 

  %div{:id => collection}
    %div{:class => 'item'}
      %div{:class => 'description'} What a cool item!and is compiled to: 

  <div id='collection'>
    <div class='item'>
      <div class='description'>What a cool item!</div>
    </div>
  </div>

*** > and <
> and < give you more control over the whitespace near a tag. > will remove all whitespace surrounding a tag, while < will remove all whitespace immediately within a tag. You can think of them as alligators eating the whitespace: > faces out of the tag and eats the whitespace on the outside, and < faces into the tag and eats the whitespace on the inside. They‘re placed at the end of a tag definition, after class, id, and attribute declarations but before / or =. For example: 

>||
  %blockquote<
    %div
      Foo!
||<

これは以下のようにコンパイルされます。

>||
  <blockquote><div>
    Foo!
  </div></blockquote>
||<

そして

>||
  %img
  %img>
  %img
>||

これは以下のようにコンパイルされます。

>||
  <img /><img /><img />
||<

そして

>||
 %p<= "Foo\nBar"
||<

これは以下のようにコンパイルされます。

>||
 <p>Foo
 Bar</p>
||<

そして最後に

>||
  %img
  %pre><
    foo
    bar
  %img
||<

これは以下のようにコンパイルされます。

>||
  <img /><pre>foo
  bar</pre><img />

||<

*** =
= is placed at the end of a tag definition, after class, id, and attribute declarations. It‘s just a shortcut for inserting Ruby code into an element. It works the same as = without a tag: it inserts the result of the Ruby code into the template. However, if the result is short enough, it is displayed entirely on one line. For example: 

  %p= "hello"is not quite the same as: 

  %p
    = "hello"It‘s compiled to: 

  <p>hello</p>~
~ works just like =, except that it runs Haml::Helpers#find_and_preserve on its input. For example, 

  ~ "Foo\n<pre>Bar\nBaz</pre>"is the same as: 

  = find_and_preserve("Foo\n<pre>Bar\nBaz</pre>")and is compiled to: 

  Foo
  <pre>Bar&#x000A;Baz</pre>See also Whitespace Preservation, below. 

XHTML Helpers
No Special Character
If no special character appears at the beginning of a line, the line is rendered as plain text. For example: 

  %gee
    %whiz
      Wow this is cool!is compiled to: 

  <gee>
    <whiz>
      Wow this is cool!
    </whiz>
  </gee>!!!
When describing XHTML documents with Haml, you can have a document type or XML prolog generated automatically by including the characters !!!. For example: 

  !!! XML
  !!!
  %html
    %head
      %title Myspace
    %body
      %h1 I am the international space station
      %p Sign my guestbookis compiled to: 

  <?xml version='1.0' encoding='utf-8' ?>
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
  <html>
    <head>
      <title>Myspace</title>
    </head>
    <body>
      <h1>I am the international space station</h1>
      <p>Sign my guestbook</p>
    </body>
  </html>You can also specify the version and type of XHTML after the !!!. XHTML 1.0 Strict, Transitional, and Frameset and XHTML 1.1 are supported. The default version is 1.0 and the default type is Transitional. For example: 

  !!! 1.1is compiled to: 

  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">and 

  !!! Strictis compiled to: 

  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">while 

  !!! Basicis compiled to: 

  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">and 

  !!! Mobileis compiled to: 

  <!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">If you‘re not using the UTF-8 character set for your document, you can specify which encoding should appear in the XML prolog in a similar way. For example: 

  !!! XML iso-8859-1is compiled to: 

  <?xml version='1.0' encoding='iso-8859-1' ?>/
The forward slash character, when placed at the beginning of a line, wraps all text after it in an HTML comment. For example: 

  %peanutbutterjelly
    / This is the peanutbutterjelly element
    I like sandwiches!is compiled to: 

  <peanutbutterjelly>
    <!-- This is the peanutbutterjelly element -->
    I like sandwiches!
  </peanutbutterjelly>The forward slash can also wrap indented sections of code. For example: 

  /
    %p This doesn't render...
    %div
      %h1 Because it's commented out!is compiled to: 

  <!--
    <p>This doesn't render...</p>
    <div>
      <h1>Because it's commented out!</h1>
    </div>
  -->You can also use Internet Explorer conditional comments (about) by enclosing the condition in square brackets after the /. For example: 

  /[if IE]
    %a{ :href => 'http://www.mozilla.com/en-US/firefox/' }
      %h1 Get Firefoxis compiled to: 

  <!--[if IE]>
    <a href='http://www.mozilla.com/en-US/firefox/'>
      <h1>Get Firefox</h1>
    </a>
  <![endif]-->\
The backslash character escapes the first character of a line, allowing use of otherwise interpreted characters as plain text. For example: 

  %title
    = @title
    \- MySiteis compiled to: 

  <title>
    MyPage
    - MySite
  </title>|
The pipe character designates a multiline string. It‘s placed at the end of a line and means that all following lines that end with | will be evaluated as though they were on the same line. For example: 

  %whoo
    %hoo I think this might get |
      pretty long so I should |
      probably make it |
      multiline so it doesn't |
      look awful. |
    %p This is short.is compiled to: 

  <whoo>
    <hoo>
      I think this might get pretty long so I should probably make it multiline so it doesn't look awful.
    </hoo>
    <p>This is short</p>
  </whoo>:
The colon character designates a filter. This allows you to pass an indented block of text as input to another filtering program and add the result to the output of Haml. The syntax is simply a colon followed by the name of the filter. For example, 

  %p
    :markdown
      Textile
      =======

      Hello, *World*is compiled to 

  <p>
    <h1>Textile</h1>

    <p>Hello, <em>World</em></p>
  </p>Filters can have Ruby code interpolated, like with ==. For example, 

  - flavor = "raspberry"
  #content
    :textile
      I *really* prefer _#{h flavor}_ jam.is compiled to 

  <div id='content'>
    <p>I <strong>really</strong> prefer <em>raspberry</em> jam.</p>
  </div>Haml has the following filters defined: 

plain
Does not parse the filtered text. This is useful for large blocks of text without HTML tags, when you don‘t want lines starting with . or - to be parsed. 
javascript
Surrounds the filtered text with <script> and CDATA tags. Useful for including inline Javascript. 
escaped
Works the same as plain, but HTML-escapes the text before placing it in the document. 
ruby
Parses the filtered text with the normal Ruby interpreter. All output sent to $stdout, like with puts, is output into the Haml document. Not available if the suppress_eval option is set to true. The Ruby code is evaluated in the same context as the Haml template. 
preserve
Inserts the filtered text into the template with whitespace preserved. preserved blocks of text aren‘t indented, and newlines are replaced with the HTML escape code for newlines, to preserve nice-looking output. See also Whitespace Preservation, below. 
erb
Parses the filtered text with ERB, like an RHTML template. Not available if the suppress_eval option is set to true. Embedded Ruby code is evaluated in the same context as the Haml template. 
sass
Parses the filtered text with Sass to produce CSS output. 
textile
Parses the filtered text with Textile (www.textism.com/tools/textile). Only works if RedCloth is installed. 
markdown
Parses the filtered text with Markdown (daringfireball.net/projects/markdown). Only works if RDiscount, RPeg-Markdown, Maruku, or BlueCloth are installed. 
maruku
Parses the filtered text with Maruku, which has some non-standard extensions to Markdown. 
You can also define your own filters (see Haml::Filters). 

Ruby evaluators
=
The equals character is followed by Ruby code, which is evaluated and the output inserted into the document as plain text. For example: 

  %p
    = ['hi', 'there', 'reader!'].join " "
    = "yo"is compiled to: 

  <p>
    hi there reader!
    yo
  </p>If the :escape_html option is set, = will sanitize any HTML-sensitive characters generated by the script. For example: 

  = '<script>alert("I\'m evil!");</script>'would be compiled to 

  &lt;script&gt;alert(&quot;I'm evil!&quot;);&lt;/script&gt;-
The hyphen character makes the text following it into "silent script": Ruby script that is evaluated, but not output. 

It is not recommended that you use this widely; almost all processing code and logic should be restricted to the Controller, the Helper, or partials. 

For example: 

  - foo = "hello"
  - foo << " there"
  - foo << " you!"
  %p= foois compiled to: 

  <p>
    hello there you!
  </p>==
Two equals characters interpolates Ruby code into plain text, similarly to Ruby string interpolation. For example, 

  %p== This is #{h quality} cake!is the same as 

  %p= "This is #{h quality} cake!"and might compile to 

  <p>This is scrumptious cake!</p>Backslashes can be used to escape "#{" strings, but they don‘t act as escapes anywhere else in the string. For example: 

  %p
    == \\ Look at \\#{h word} lack of backslash: \#{foo}might compile to 

 <p>
   \\ Look at \yon lack of backslash: #{foo}
 </p>&=
An ampersand followed by one or two equals characters evaluates Ruby code just like the equals without the ampersand, but sanitizes any HTML-sensitive characters in the result of the code. For example: 

  &= "I like cheese & crackers"compiles to 

  I like cheese &amp; crackersIf the :escape_html option is set, &= behaves identically to =. 

!=
An exclamation mark followed by one or two equals characters evaluates Ruby code just like the equals would, but never sanitizes the HTML. 

By default, the single equals doesn‘t sanitize HTML either. However, if the :escape_html option is set, = will sanitize the HTML, but != still won‘t. For example, if :escape_html is set: 

  = "I feel <strong>!"
  != "I feel <strong>!"compiles to 

  I feel &lt;strong&gt;!
  I feel <strong>!Blocks
Ruby blocks, like XHTML tags, don‘t need to be explicitly closed in Haml. Rather, they‘re automatically closed, based on indentation. A block begins whenever the indentation is increased after a silent script command. It ends when the indentation decreases (as long as it‘s not an else clause or something similar). For example: 

  - (42...47).each do |i|
    %p= i
  %p See, I can count!is compiled to: 

  <p>
    42
  </p>
  <p>
    43
  </p>
  <p>
    44
  </p>
  <p>
    45
  </p>
  <p>
    46
  </p>Another example: 

  %p
    - case 2
    - when 1
      = "1!"
    - when 2
      = "2?"
    - when 3
      = "3."is compiled to: 

  <p>
    2?
  </p>-#
The hyphen followed immediately by the pound sign signifies a silent comment. Any text following this isn‘t rendered in the resulting document at all. 

For example: 

  %p foo
  -# This is a comment
  %p baris compiled to: 

  <p>foo</p>
  <p>bar</p>You can also nest text beneath a silent comment. None of this text will be rendered. For example: 

  %p foo
  -#
    This won't be displayed
      Nor will this
  %p baris compiled to: 

  <p>foo</p>
  <p>bar</p>Other Useful Things
Whitespace Preservation
Sometimes you don‘t want Haml to indent all your text. For example, tags like pre and textarea are whitespace-sensitive; indenting the text makes them render wrong. 

Haml deals with this by "preserving" newlines before they‘re put into the document — converting them to the XHTML whitespace escape code, &x000A;. Then Haml won‘t try to re-format the indentation. 

Literal textarea and pre tags automatically preserve their content. Dynamically can‘t be caught automatically, and so should be passed through Haml::Helpers#find_and_preserve or the ~ command, which has the same effect (see above). 

Blocks of literal text can be preserved using the :preserve filter (see above). 

Helpers
Haml offers a bunch of helpers that are useful for doing stuff like preserving whitespace, creating nicely indented output for user-defined helpers, and other useful things. The helpers are all documented in the Haml::Helpers and Haml::Helpers::ActionViewExtensions modules. 

Haml Options
Options can be set by setting the Haml::Template.options hash in environment.rb in Rails… 

  Haml::Template.options[:format] = :html5…or by setting the Merb::Plugin.config[:haml] hash in init.rb in Merb… 

  Merb::Plugin.config[:haml][:format] = :html5…or by passing an options hash to Haml::Engine.new. Available options are: 

:format
Determines the output format. The default is :xhtml. Other options are :html4 and :html5, which are identical to :xhtml except there are no self-closing tags, XML prolog is ignored and correct DOCTYPEs are generated. 
:escape_html
Sets whether or not to escape HTML-sensitive characters in script. If this is true, = behaves like &=; otherwise, it behaves like !=. Note that if this is set, != should be used for yielding to subtemplates and rendering partials. Defaults to false. 
:suppress_eval
Whether or not attribute hashes and Ruby scripts designated by = or ~ should be evaluated. If this is true, said scripts are rendered as empty strings. Defaults to false. 
:attr_wrapper
The character that should wrap element attributes. This defaults to ‘ (an apostrophe). Characters of this type within the attributes will be escaped (e.g. by replacing them with &apos;) if the character is an apostrophe or a quotation mark. 
:filename
The name of the Haml file being parsed. This is only used as information when exceptions are raised. This is automatically assigned when working through ActionView, so it‘s really only useful for the user to assign when dealing with Haml programatically. 
:line
The line offset of the Haml template being parsed. This is useful for inline templates, similar to the last argument to Kernel#eval. 
:autoclose
A list of tag names that should be automatically self-closed if they have no content. Defaults to [‘meta’, ‘img’, ‘link’, ‘br’, ‘hr’, ‘input’, ‘area’, ‘param’, ‘col’, ‘base’]. 
:preserve
A list of tag names that should automatically have their newlines preserved using the Haml::Helpers#preserve helper. This means that any content given on the same line as the tag will be preserved. For example:   %textarea= "Foo\nBar"compiles to: 

  <textarea>Foo&&#x000A;Bar</textarea>Defaults to [‘textarea’, ‘pre’]. 

See also Whitespace Preservation, above. 
